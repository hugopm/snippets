snippet modint
template<const int MOD>
struct modint
{
	//int x;
	long long x;
	modint() : x(0) { }
	modint(long long u) : x(u) { if (x >= MOD || x < 0) { x %= MOD; if (x < 0) x += MOD; } } 
	//modint(long long u) : x(u) { }
	modint(const modint &m) : x(m.x) { }
	modint& operator=(const modint &m) { x = m.x; return *this; }
	friend bool operator==(const modint& a, const modint& b) { return a.x == b.x; }
	friend bool operator!=(const modint& a, const modint& b) { return a.x != b.x; }
	friend bool operator<(const modint& a, const modint& b) { return a.x < b.x; }

	modint& operator+=(const modint& m) { x += m.x; if (x >= MOD) x -= MOD; return *this; }
	modint& operator-=(const modint& m) { x -= m.x; if (x < 0) x += MOD; return *this; }
	modint& operator*=(const modint& m) { x = (1ll*x*m.x)%MOD; return *this; }	

	friend modint operator-(const modint &a) { modint res(a); if (res.x) res.x = MOD-res.x; return res; }
	friend modint operator+(const modint& a, const modint &b) { return modint(a) += modint(b); }
	friend modint operator-(const modint& a, const modint &b) { return modint(a) -= modint(b); }
	friend modint operator*(const modint& a, const modint &b) { return modint(a) *= modint(b); }
	modint f2() { return modint(x) += modint(x); }

	static long long fp(long long u, long long k) {
		long long res = 1;
		while (k > 0) {
			if (k & 1)
				res = (res*u) % MOD;
			u = (u*u) % MOD;
			k /= 2;
		}
		return res;
	}
	modint fastpow(long long k) { return modint(fp(x, k)); }
	modint inv() { return modint(fp(x, MOD-2)); }
	static modint sign(long long k) { return ((k & 1) ? modint(MOD-1) : modint(1)); }
	friend ostream& operator << (ostream& out, const modint& a) { return out << a.x; }
};

$0
endsnippet

snippet m197
const int m197 = (int)(1e9) + 7;
using mint = modint<m197>;

$0
endsnippet

snippet m998
const int m998 = 998244353;
using mint = modint<m998>;

$0
endsnippet

snippet modpair
template<int M1, int M2>
struct modpair {
	modint<M1> x1;
	modint<M2> x2;
	modpair() : x1(0), x2(0) { }
	modpair(const modint<M1> &m1, const modint<M2> &m2) : x1(m1), x2(m2) { }
	modpair(long long u) : x1(u), x2(u) { }
	modpair(long long u1, long long u2) : x1(u1), x2(u2) { }

	friend bool operator==(const modpair &a, const modpair &b) { return a.x1 == b.x1 && a.x2 == b.x2; }
	friend bool operator!=(const modpair &a, const modpair &b) { return a.x1 != b.x1 || a.x2 != b.x2; }
	friend bool operator<(const modpair &a, const modpair &b) {
		if (a.x1 != b.x1) return a.x1 < b.x1;
		else return a.x2 < b.x2;
	}

	modpair& operator+=(const modpair& m) { x1 += m.x1; x2 += m.x2; return *this; }
	modpair& operator-=(const modpair& m) { x1 -= m.x1; x2 -= m.x2; return *this; }
	modpair& operator*=(const modpair& m) { x1 *= m.x1; x2 *= m.x2; return *this; }

	friend modpair operator+(const modpair& a, const modpair &b) { return modpair(a) += modpair(b); }
	friend modpair operator-(const modpair& a, const modpair &b) { return modpair(a) -= modpair(b); }
	friend modpair operator*(const modpair& a, const modpair &b) { return modpair(a) *= modpair(b); }

	modpair fastpow(int k) { return modpair(x1.fastpow(k), x2.fastpow(k)); }
	modpair inv() { return modpair(x1.inv(), x2.inv()); }
};
using mval = modpair<999997301, 1000004123>;

$0
endsnippet

snippet Hash
const int hash_borne = -50;
vector<int> list_base {31, 37, 41, 43, 47, 53, 59};
mval base, invBase;
mval pow_base[hash_borne];

void init_hash() {
	srand(time(NULL));
	random_shuffle(list_base.begin(), list_base.end());
	base = mval(list_base[0], list_base[1]);
	invBase = base.inv();
	pow_base[0] = mval(1);
	for (int i = 1; i < hash_borne; ++i) {
		pow_base[i] = pow_base[i-1] * base;	
	}
}

$0
endsnippet
