snippet AhoCorasick
struct AhoCorasick {
	static const int K = 26;

	struct Vertex {
		int next[K];
		int occLeaf = 0;
		int p = -1;
		char pch;
		int link = -1;
		int sumLeaf = -1;
		int go[K];

		Vertex(int p=-1, char ch='$') : p(p), pch(ch) {
			fill(begin(next), end(next), -1);
			fill(begin(go), end(go), -1);
		}
	};

	vector<Vertex> t;
	AhoCorasick() : t(1) { }

	void add_string(string const& s) {
		int v = 0;
		for (char ch : s) {
			int c = ch - 'a';
			if (t[v].next[c] == -1) {
				t[v].next[c] = t.size();
				t.emplace_back(v, ch);
			}
			v = t[v].next[c];
		}
		++t[v].occLeaf;
	}

	int get_link(int v) {
		if (t[v].link == -1) {
			if (v == 0 || t[v].p == 0)
				t[v].link = 0;
			else
				t[v].link = go(get_link(t[v].p), t[v].pch);
		}
		return t[v].link;
	}

	int go(int v, char ch) {
		int c = ch - 'a';
		if (t[v].go[c] == -1) {
			if (t[v].next[c] != -1)
				t[v].go[c] = t[v].next[c];
			else
				t[v].go[c] = v == 0 ? 0 : go(get_link(v), ch);
		}
		return t[v].go[c];
	} 

	int getSumLeaf(int v) {
		if (t[v].sumLeaf == -1)
			t[v].sumLeaf = v ? t[v].occLeaf + getSumLeaf(get_link(v)) : 0;
		return t[v].sumLeaf;
	}

	vector<int> endHere(string text) {
		int n = text.size();
		vector<int> res(n, 0);
		int nod = 0;
		for (int pos = 0; pos < n; ++pos) {
			nod = go(nod, text[pos]);	
			res[pos] = getSumLeaf(nod);
		}
		return res;
	}
};

$0
endsnippet
