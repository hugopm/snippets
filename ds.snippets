snippet seg_add
struct seg_add {
	using DT = long long;
	int size = 0;
	vector<DT> arr;

	seg_add(vector<DT> v) {
		size = v.size();
		arr.assign(2*size, 0);
		for (int i = size; i < 2*size; ++i)
			arr[i] = v[i-size];
	}

	seg_add(int t, DT x) : seg_add(vector<DT>(t, x)) { }

	DT get(int pos) {
		pos += size;
		DT res = 0;
		while (pos >= 1) {
			res += arr[pos];
			pos /= 2;
		}
		return res;
	}

	void add(int lo, int ri, DT delta) {
		lo += size;
		ri += size+1;
		while (lo < ri) {
			if (lo & 1)
				arr[lo++] += delta;
			if (ri & 1)
				arr[--ri] += delta;
			lo /= 2; ri /= 2;	
		}
	}
};

$0
endsnippet

snippet dsu
struct dsu {
	int size;
	vector<int> leader, weight;

	dsu(int ta) : size(ta), leader(ta), weight(ta, 1) {
		iota(leader.begin(), leader.end(), 0);
	}

	int get(int x) {
		if (leader[x] != x)
			leader[x] = get(leader[x]);
		return leader[x];
	}

	bool unite(int a, int b) {
		a = get(a);
		b = get(b);
		if (a == b)
			return false;
		if (weight[a] < weight[b])
			swap(a, b);
		leader[b] = a;
		weight[a] += weight[b];
		return true;
	}
};

$0
endsnippet

snippet add_max
struct add_max {
	using DT = long long;
	int height, size;
	vector<DT> arr, delay;

	add_max(int ta) : height(1), size(2) {
		while (size < ta) {
			size *= 2;
			++height;
		}
		arr.assign(2*size, 0);
		delay.assign(size, 0);
	}

	inline void apply(int nod, DT val) {
		arr[nod] += val;
		if (nod < size)
			delay[nod] += val;
	}

	void build(int nod) {
		while (nod > 1) {
			nod /= 2;
			arr[nod] = ${3:max}(arr[2*nod], arr[2*nod+1]) + delay[nod];
		}
	}

	void push(int leaf) {
		for (int lvl = height; lvl > 0; --lvl) {
			int nod = leaf >> lvl; 
			if (delay[nod] != 0) {
				apply(2*nod, delay[nod]);
				apply(2*nod+1, delay[nod]);
				delay[nod] = 0;
			}
		}
	}

	void add(int lo, int ri, DT delta) {
		lo += size;
		ri += size+1;
		int l0 = lo, r0 = ri;
		while (lo < ri) {
			if (lo & 1)
				apply(lo++, delta);
			if (ri & 1)
				apply(--ri, delta);
			lo /= 2; ri /= 2;
		}
		build(l0);
		build(r0-1);
	}

	DT get(int lo, int ri) {
		lo += size;
		ri += size+1;
		push(lo); push(ri-1);
		DT res = arr[lo];
		while (lo < ri) {
			if (lo & 1)
				res = $3(res, arr[lo++]);
			if (ri & 1)
				res = $3(res, arr[--ri]);
			lo /= 2; ri /= 2;
		}
		return res;
	}
};

$0
endsnippet

snippet add_sum
struct add_sum {
	using DT = long long;
	int height, size;
	vector<DT> arr, delay;
	vector<int> cov;

	add_sum(int ta) : height(1), size(2) {
		while (size < ta) {
			size *= 2;
			++height;
		}
		arr.assign(2*size, 0);
		delay.assign(size, 0);
		cov.assign(2*size, 1);
		for (int i = size-1; i >= 1; --i) {
			cov[i] = 2*cov[2*i];	
		}
	}

	inline void apply(int nod, DT val) {
		arr[nod] += cov[nod]*val;
		if (nod < size)
			delay[nod] += val;
	}

	void build(int nod) {
		while (nod > 1) {
			nod /= 2;
			arr[nod] = arr[2*nod] + arr[2*nod+1] + cov[nod] * delay[nod];
		}
	}

	void push(int leaf) {
		for (int lvl = height; lvl > 0; --lvl) {
			int nod = leaf >> lvl; 
			if (delay[nod] != 0) {
				apply(2*nod, delay[nod]);
				apply(2*nod+1, delay[nod]);
				delay[nod] = 0;
			}
		}
	}

	void add(int lo, int ri, DT delta) {
		lo += size;
		ri += size+1;
		int l0 = lo, r0 = ri;
		while (lo < ri) {
			if (lo & 1)
				apply(lo++, delta);
			if (ri & 1)
				apply(--ri, delta);
			lo /= 2; ri /= 2;
		}
		build(l0);
		build(r0-1);
	}

	DT get(int lo, int ri) {
		lo += size;
		ri += size+1;
		push(lo); push(ri-1);
		DT res = 0;
		while (lo < ri) {
			if (lo & 1)
				res += arr[lo++];
			if (ri & 1)
				res += arr[--ri];
			lo /= 2; ri /= 2;
		}
		return res;
	}
};

endsnippet
