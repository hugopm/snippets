snippet tpl
#include <algorithm>
#include <cassert>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;
$1
int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	$0
}
endsnippet

snippet tpl2 
#include <algorithm>
#include <cassert>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;
$2
bool solve() {
	$0
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	if (!solve()) {
		cout << "${1:NO}\n";
	}
}
endsnippet

snippet tpl3
#include <algorithm>
#include <cassert>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;
$3
bool solve() {
	$0
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);
	if (!solve()) {
		cout << "${1:NO}\n";
	} else {
		cout << "${2:YES}\n";
	}
}
endsnippet

snippet mt
#include <algorithm>
#include <cassert>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;
$1
void solve() {
	$0
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	int nbTests;
	cin >> nbTests;
	for (int iTest = 0; iTest < nbTests; ++iTest) {
		solve();
	}
}
endsnippet

snippet mt2
#include <algorithm>
#include <cassert>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;
$2
bool solve() {
	$0
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	int nbTests;
	cin >> nbTests;
	for (int iTest = 0; iTest < nbTests; ++iTest) {
		if (!solve()) {
			cout << "${1:NO}\n";
		}
	}

	return 0;
}
endsnippet

snippet mt3
#include <algorithm>
#include <cassert>
#include <iostream>
#include <numeric>
#include <vector>
using namespace std;
using ll = long long;
$3
bool solve() {
	$0
	return true;
}

int main() {
	ios::sync_with_stdio(false);
	cin.tie(0);

	int nbTests;
	cin >> nbTests;
	for (int iTest = 0; iTest < nbTests; ++iTest) {
		if (!solve()) {
			cout << "${1:NO}\n";
		} else {
			cout << "${2:YES}\n";
		}
	}

	return 0;
}
endsnippet
